{"type":"operationStart","subtype":"profile","data":{"_id":"OnxmX2iDAfxJeQcM","timestamp":"2024-01-14T17:27:33.426Z","state":"queued","mode":"standard","creationDate":"2024-01-14T17:27:33.431Z","modificationDate":"2024-01-14T17:27:33.431Z","shortid":"0406dVb","$entitySet":"profiles"},"doDiffs":false,"timestamp":1705253253428,"id":"v92nyojo8zf768l","previousOperationId":null,"operationId":"uqyvmedkjfefmf1"}
{"type":"log","level":"info","message":"Render request 2 queued for execution and waiting for available worker","previousOperationId":"uqyvmedkjfefmf1","timestamp":1705253253428,"id":"q4q76m05ja3wc0m"}
{"type":"operationStart","subtype":"render","name":"orders-main","previousOperationId":"uqyvmedkjfefmf1","timestamp":1705253253448,"id":"oirdv78x1memdm1","previousEventId":"v92nyojo8zf768l","operationId":"y74ifvvphsypasg"}
{"type":"log","timestamp":1705253253449,"level":"info","message":"Starting rendering request 2","meta":{"rootId":"lyox504cg9329ph","id":"lyox504cg9329ph"},"id":"wfz3tgs7ers0mor","previousOperationId":"y74ifvvphsypasg"}
{"type":"log","timestamp":1705253253450,"level":"info","message":"Rendering template { name: orders-main, recipe: chrome-pdf, engine: handlebars, preview: true }","meta":{"rootId":"lyox504cg9329ph","id":"lyox504cg9329ph"},"id":"78b8wj1jpfko947","previousOperationId":"y74ifvvphsypasg"}
{"type":"log","timestamp":1705253253452,"level":"debug","message":"Data item not defined for this template.","meta":{"rootId":"lyox504cg9329ph","id":"lyox504cg9329ph"},"id":"5ujwu3a3ldce9wx","previousOperationId":"y74ifvvphsypasg"}
{"type":"log","timestamp":1705253253459,"level":"debug","message":"Executing script orders-script (beforeRender)","meta":{"rootId":"lyox504cg9329ph","id":"lyox504cg9329ph"},"id":"att9e1qgs968uiq","previousOperationId":"y74ifvvphsypasg"}
{"type":"operationStart","subtype":"scriptsBeforeRender","name":"scripts beforeRender","timestamp":1705253253744,"id":"atf3diyer9xynas","previousEventId":"oirdv78x1memdm1","operationId":"7ygjghmf1unfmqy","previousOperationId":"y74ifvvphsypasg"}
{"type":"operationStart","subtype":"script","name":"scripts orders-script","previousOperationId":"7ygjghmf1unfmqy","timestamp":1705253253744,"id":"8fj9wbz3rksj3r2","previousEventId":"atf3diyer9xynas","operationId":"kerqrxb8gmdm28g"}
{"type":"log","timestamp":1705253253757,"level":"warn","message":"Error when processing render request 2\n(because) error when evaluating custom script /samples/Orders/orders-script\nProtocol \"http:\" not supported. Expected \"https:\"\n\n(sandbox.js line 7:11)\n\n   5 | function fetchOrders() {\n   6 |   return new Promise((resolve, reject) => {\n>  7 |     https.get(\n     |           ^\n   8 |       `http://localhost:8080/api/locations/count-localizaciones`,\n   9 |       (result) => {\n  10 |         var str = \"\";\n\n(sandbox.js line 6:10)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |   return new Promise((resolve, reject) => {\n    |          ^\n  7 |     https.get(\n  8 |       `http://localhost:8080/api/locations/count-localizaciones`,\n  9 |       (result) => {\n\n(sandbox.js line 21:24)\n\n  19 | // group the data for report\n  20 | async function prepareDataSource() {\n> 21 |   const orders = await fetchOrders();\n     |                        ^\n  22 |   const ordersByShipCountry = orders.reduce((a, v) => {\n  23 |     a[v.ShipCountry] = a[v.ShipCountry] || [];\n  24 |     a[v.ShipCountry].push(v);\n\n(sandbox.js line 56:27)\n\n  54 | // add jsreport hook which modifies the report input data\n  55 | async function beforeRender(req, res) {\n> 56 |   req.data.orders = await prepareDataSource();\n     |                           ^\n  57 | }\n  58 |\n\n\nTypeError [ERR_INVALID_PROTOCOL]: Protocol \"http:\" not supported. Expected \"https:\"\n    at new NodeError (node:internal/errors:405:5)\n    at new ClientRequest (node:_http_client:188:11)\n    at request (node:https:358:10)\n    at Object.get (node:https:392:15)\n    at sandbox.js:7:11\n    at new Promise (<anonymous>)\n    at fetchOrders (sandbox.js:6:10)\n    at prepareDataSource (sandbox.js:21:24)\n    at Object.beforeRender (sandbox.js:56:27)\n    at executionFn (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)","meta":{"rootId":"lyox504cg9329ph","id":"lyox504cg9329ph"},"id":"rg5dv7t4w82f9vs","previousOperationId":"kerqrxb8gmdm28g"}
{"type":"log","timestamp":1705253253757,"level":"warn","message":"Rendering request 2 finished with error in 332 ms","meta":{"rootId":"lyox504cg9329ph","id":"lyox504cg9329ph"},"id":"ivmu9mme59yl1d8","previousOperationId":"kerqrxb8gmdm28g"}
{"type":"error","timestamp":1705253253773,"code":"ERR_INVALID_PROTOCOL","statusCode":400,"weak":true,"decoratedSuffix":"\n\n(sandbox.js line 7:11)\n\n   5 | function fetchOrders() {\n   6 |   return new Promise((resolve, reject) => {\n>  7 |     https.get(\n     |           ^\n   8 |       `http://localhost:8080/api/locations/count-localizaciones`,\n   9 |       (result) => {\n  10 |         var str = \"\";\n\n(sandbox.js line 6:10)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |   return new Promise((resolve, reject) => {\n    |          ^\n  7 |     https.get(\n  8 |       `http://localhost:8080/api/locations/count-localizaciones`,\n  9 |       (result) => {\n\n(sandbox.js line 21:24)\n\n  19 | // group the data for report\n  20 | async function prepareDataSource() {\n> 21 |   const orders = await fetchOrders();\n     |                        ^\n  22 |   const ordersByShipCountry = orders.reduce((a, v) => {\n  23 |     a[v.ShipCountry] = a[v.ShipCountry] || [];\n  24 |     a[v.ShipCountry].push(v);\n\n(sandbox.js line 56:27)\n\n  54 | // add jsreport hook which modifies the report input data\n  55 | async function beforeRender(req, res) {\n> 56 |   req.data.orders = await prepareDataSource();\n     |                           ^\n  57 | }\n  58 |\n\n","entity":{"shortid":"BJX1Jw82ce","name":"orders-script","content":"// server side script fetching remote data and preparing report data source\nconst https = require(\"https\");\n\n// call remote http rest api\nfunction fetchOrders() {\n  return new Promise((resolve, reject) => {\n    https.get(\n      `http://localhost:8080/api/locations/count-localizaciones`,\n      (result) => {\n        var str = \"\";\n        result.on(\"data\", (b) => (str += b));\n        result.on(\"error\", reject);\n        result.on(\"end\", () => resolve(JSON.parse(str).value));\n      }\n    );\n  });\n}\n\n// group the data for report\nasync function prepareDataSource() {\n  const orders = await fetchOrders();\n  const ordersByShipCountry = orders.reduce((a, v) => {\n    a[v.ShipCountry] = a[v.ShipCountry] || [];\n    a[v.ShipCountry].push(v);\n    return a;\n  }, {});\n\n  return Object.keys(ordersByShipCountry)\n    .map((country) => {\n      const ordersInCountry = ordersByShipCountry[country];\n\n      const accumulated = {};\n\n      ordersInCountry.forEach((o) => {\n        o.OrderDate = new Date(o.OrderDate);\n        const key =\n          o.OrderDate.getFullYear() + \"/\" + (o.OrderDate.getMonth() + 1);\n        accumulated[key] = accumulated[key] || {\n          value: 0,\n          orderDate: o.OrderDate,\n        };\n        accumulated[key].value++;\n      });\n\n      return {\n        rows: ordersInCountry,\n        country,\n        accumulated,\n      };\n    })\n    .slice(0, 2);\n}\n\n// add jsreport hook which modifies the report input data\nasync function beforeRender(req, res) {\n  req.data.orders = await prepareDataSource();\n}\n"},"property":"content","logged":true,"previousOperationId":"kerqrxb8gmdm28g","id":"ty7gna7leo2cvgk","stack":"TypeError [ERR_INVALID_PROTOCOL]: Protocol \"http:\" not supported. Expected \"https:\"\n    at new NodeError (node:internal/errors:405:5)\n    at new ClientRequest (node:_http_client:188:11)\n    at request (node:https:358:10)\n    at Object.get (node:https:392:15)\n    at sandbox.js:7:11\n    at new Promise (<anonymous>)\n    at fetchOrders (sandbox.js:6:10)\n    at prepareDataSource (sandbox.js:21:24)\n    at Object.beforeRender (sandbox.js:56:27)\n    at executionFn (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)","message":"Error when evaluating custom script /samples/Orders/orders-script\nProtocol \"http:\" not supported. Expected \"https:\"\n\n(sandbox.js line 7:11)\n\n   5 | function fetchOrders() {\n   6 |   return new Promise((resolve, reject) => {\n>  7 |     https.get(\n     |           ^\n   8 |       `http://localhost:8080/api/locations/count-localizaciones`,\n   9 |       (result) => {\n  10 |         var str = \"\";\n\n(sandbox.js line 6:10)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |   return new Promise((resolve, reject) => {\n    |          ^\n  7 |     https.get(\n  8 |       `http://localhost:8080/api/locations/count-localizaciones`,\n  9 |       (result) => {\n\n(sandbox.js line 21:24)\n\n  19 | // group the data for report\n  20 | async function prepareDataSource() {\n> 21 |   const orders = await fetchOrders();\n     |                        ^\n  22 |   const ordersByShipCountry = orders.reduce((a, v) => {\n  23 |     a[v.ShipCountry] = a[v.ShipCountry] || [];\n  24 |     a[v.ShipCountry].push(v);\n\n(sandbox.js line 56:27)\n\n  54 | // add jsreport hook which modifies the report input data\n  55 | async function beforeRender(req, res) {\n> 56 |   req.data.orders = await prepareDataSource();\n     |                           ^\n  57 | }\n  58 |\n\n"}
