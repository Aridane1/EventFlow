{"type":"operationStart","subtype":"profile","data":{"_id":"UaUhDKQjX8hwW8B0","timestamp":"2024-01-14T17:37:39.186Z","state":"queued","mode":"standard","creationDate":"2024-01-14T17:37:39.192Z","modificationDate":"2024-01-14T17:37:39.192Z","shortid":"L2SyJsv","$entitySet":"profiles"},"doDiffs":false,"timestamp":1705253859188,"id":"ew86w75qtxs3q2q","previousOperationId":null,"operationId":"fc06owbpsdzejxc"}
{"type":"log","level":"info","message":"Render request 1 queued for execution and waiting for available worker","previousOperationId":"fc06owbpsdzejxc","timestamp":1705253859190,"id":"e9odkye2142y55l"}
{"type":"operationStart","subtype":"render","name":"orders-main","previousOperationId":"fc06owbpsdzejxc","timestamp":1705253859234,"id":"ytvlhgyfhz81a8j","previousEventId":"ew86w75qtxs3q2q","operationId":"ci3101xrwzqmqyz"}
{"type":"log","timestamp":1705253859235,"level":"info","message":"Starting rendering request 1","meta":{"rootId":"de9admik5ksavfk","id":"de9admik5ksavfk"},"id":"2f20vpmbmos5pzk","previousOperationId":"ci3101xrwzqmqyz"}
{"type":"log","timestamp":1705253859236,"level":"info","message":"Rendering template { name: orders-main, recipe: chrome-pdf, engine: handlebars, preview: true }","meta":{"rootId":"de9admik5ksavfk","id":"de9admik5ksavfk"},"id":"s35wns09rd9b21m","previousOperationId":"ci3101xrwzqmqyz"}
{"type":"log","timestamp":1705253859239,"level":"debug","message":"Data item not defined for this template.","meta":{"rootId":"de9admik5ksavfk","id":"de9admik5ksavfk"},"id":"mumd0epm01q9j73","previousOperationId":"ci3101xrwzqmqyz"}
{"type":"log","timestamp":1705253859244,"level":"debug","message":"Executing script orders-script (beforeRender)","meta":{"rootId":"de9admik5ksavfk","id":"de9admik5ksavfk"},"id":"08ggrmehgty6764","previousOperationId":"ci3101xrwzqmqyz"}
{"type":"operationStart","subtype":"scriptsBeforeRender","name":"scripts beforeRender","timestamp":1705253859655,"id":"xvkig1xy7uai6nk","previousEventId":"ytvlhgyfhz81a8j","operationId":"kwiuzpts9bt1k0t","previousOperationId":"ci3101xrwzqmqyz"}
{"type":"operationStart","subtype":"script","name":"scripts orders-script","previousOperationId":"kwiuzpts9bt1k0t","timestamp":1705253859655,"id":"fboy745d8o1fnws","previousEventId":"xvkig1xy7uai6nk","operationId":"ob3vsb4l2lr2lqw"}
{"type":"log","timestamp":1705253859682,"level":"debug","message":"(console:log) undefined","meta":{"userLevel":true,"rootId":"de9admik5ksavfk","id":"de9admik5ksavfk"},"id":"xdb0ic5am7d77vn","previousOperationId":"ob3vsb4l2lr2lqw"}
{"type":"log","timestamp":1705253859686,"level":"warn","message":"Error when processing render request 1\n(because) error when evaluating custom script /samples/Orders/orders-script\nordersByShipCountry is not defined\n\n(sandbox.js line 23:22)\n\n  21 |   const orders = await fetchOrders();\n  22 |   console.log(orders);\n> 23 |   return Object.keys(ordersByShipCountry)\n     |                      ^\n  24 |     .map((country) => {\n  25 |       const ordersInCountry = ordersByShipCountry[country];\n  26 |\n\n(sandbox.js line 51:21)\n\n  49 | // add jsreport hook which modifies the report input data\n  50 | async function beforeRender(req, res) {\n> 51 |   req.data.orders = await prepareDataSource();\n     |                     ^\n  52 | }\n  53 |\n\n\nReferenceError: ordersByShipCountry is not defined\n    at prepareDataSource (sandbox.js:23:22)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Object.beforeRender (sandbox.js:51:21)\n    at async executionFn (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:11)\n    at async run (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:137:16)\n    at async WorkerReporter.runInSandbox [as _runInSandbox] (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\runInSandbox.js:195:14)\n    at async executeScript (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:122:12)\n    at async Scripts._runScript (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\worker.js:140:30)\n    at async Scripts.handleBeforeRender (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\worker.js:64:7)\n    at async ListenerCollection.fire (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\shared\\listenerCollection.js:157:21)","meta":{"rootId":"de9admik5ksavfk","id":"de9admik5ksavfk"},"id":"22ors6ttgrdrc83","previousOperationId":"ob3vsb4l2lr2lqw"}
{"type":"log","timestamp":1705253859686,"level":"warn","message":"Rendering request 1 finished with error in 501 ms","meta":{"rootId":"de9admik5ksavfk","id":"de9admik5ksavfk"},"id":"gb21zo65rohy6wf","previousOperationId":"ob3vsb4l2lr2lqw"}
{"type":"error","timestamp":1705253859704,"statusCode":400,"weak":true,"lineNumber":23,"decoratedSuffix":"\n\n(sandbox.js line 23:22)\n\n  21 |   const orders = await fetchOrders();\n  22 |   console.log(orders);\n> 23 |   return Object.keys(ordersByShipCountry)\n     |                      ^\n  24 |     .map((country) => {\n  25 |       const ordersInCountry = ordersByShipCountry[country];\n  26 |\n\n(sandbox.js line 51:21)\n\n  49 | // add jsreport hook which modifies the report input data\n  50 | async function beforeRender(req, res) {\n> 51 |   req.data.orders = await prepareDataSource();\n     |                     ^\n  52 | }\n  53 |\n\n","entity":{"shortid":"BJX1Jw82ce","name":"orders-script","content":"// server side script fetching remote data and preparing report data source\nconst http = require(\"http\");\n\n// call remote http rest api\nfunction fetchOrders() {\n  return new Promise((resolve, reject) => {\n    http.get(\n      `http://localhost:8080/api/locations/count-localizaciones`,\n      (result) => {\n        var str = \"\";\n        result.on(\"data\", (b) => (str += b));\n        result.on(\"error\", reject);\n        result.on(\"end\", () => resolve(JSON.parse(str).value));\n      }\n    );\n  });\n}\n\n// group the data for report\nasync function prepareDataSource() {\n  const orders = await fetchOrders();\n  console.log(orders);\n  return Object.keys(ordersByShipCountry)\n    .map((country) => {\n      const ordersInCountry = ordersByShipCountry[country];\n\n      const accumulated = {};\n\n      ordersInCountry.forEach((o) => {\n        o.OrderDate = new Date(o.OrderDate);\n        const key =\n          o.OrderDate.getFullYear() + \"/\" + (o.OrderDate.getMonth() + 1);\n        accumulated[key] = accumulated[key] || {\n          value: 0,\n          orderDate: o.OrderDate,\n        };\n        accumulated[key].value++;\n      });\n\n      return {\n        rows: ordersInCountry,\n        country,\n        accumulated,\n      };\n    })\n    .slice(0, 2);\n}\n\n// add jsreport hook which modifies the report input data\nasync function beforeRender(req, res) {\n  req.data.orders = await prepareDataSource();\n}\n"},"property":"content","logged":true,"previousOperationId":"ob3vsb4l2lr2lqw","id":"wirgr73q8usocmr","stack":"ReferenceError: ordersByShipCountry is not defined\n    at prepareDataSource (sandbox.js:23:22)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Object.beforeRender (sandbox.js:51:21)\n    at async executionFn (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:11)\n    at async run (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:137:16)\n    at async WorkerReporter.runInSandbox [as _runInSandbox] (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\runInSandbox.js:195:14)\n    at async executeScript (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:122:12)\n    at async Scripts._runScript (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\worker.js:140:30)\n    at async Scripts.handleBeforeRender (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\worker.js:64:7)\n    at async ListenerCollection.fire (C:\\Users\\arida\\Dev\\2DAM\\EventFlow\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\shared\\listenerCollection.js:157:21)","message":"Error when evaluating custom script /samples/Orders/orders-script\nordersByShipCountry is not defined\n\n(sandbox.js line 23:22)\n\n  21 |   const orders = await fetchOrders();\n  22 |   console.log(orders);\n> 23 |   return Object.keys(ordersByShipCountry)\n     |                      ^\n  24 |     .map((country) => {\n  25 |       const ordersInCountry = ordersByShipCountry[country];\n  26 |\n\n(sandbox.js line 51:21)\n\n  49 | // add jsreport hook which modifies the report input data\n  50 | async function beforeRender(req, res) {\n> 51 |   req.data.orders = await prepareDataSource();\n     |                     ^\n  52 | }\n  53 |\n\n"}
